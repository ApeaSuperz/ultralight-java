import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
}

group 'com.labymedia'

def lwjglClassifier = {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "natives-windows"
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "natives-macos"
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "natives-linux"
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2', classifier: lwjglClassifier()

    implementation project(':ultralight-java-base')
    implementation project(':ultralight-java-databind')

    implementation group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'com.labymedia', name: 'ultralight-java-gpu', version: '1.7-SNAPSHOT'
}

def runDir = file("run")
if(!runDir.exists() && !runDir.mkdirs()) {
    throw new GradleException("Failed to create run directory")
}

def ultralightOsIdentifier = {
    def bitName = (System.getProperty("os.arch", "?").contains("64") ||
            System.getProperty("sun.arch.data.model", "?").contains("64")) ? "64" : "32"

    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "win-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "mac-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "linux-x" + bitName
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

application {
    mainClassName = "com.labymedia.ultralight.lwjgl3.opengl.ExampleMain"
}

run {
    workingDir runDir
}

task copyResources(type: Copy) {
    from new File(project(':ultralight-java-native').buildDir, "cmake-gen-${ultralightOsIdentifier()}/3rdparty/ultralight-${ultralightOsIdentifier()}/bin")
    include "**/*.dll", "**/*.so", "**/*.dylib", "resources/*"
    into runDir
}

task printRunCmd {
    doLast {
        println tasks.run.commandLine.join(" ")
    }
}

run.dependsOn copyResources
