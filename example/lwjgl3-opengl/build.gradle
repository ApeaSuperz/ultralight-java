import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonOutput

plugins {
    id 'application'
}

group 'com.labymedia'

def lwjglClassifier = {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "natives-windows"
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "natives-macos"
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "natives-linux"
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2', classifier: lwjglClassifier()

    implementation project(':ultralight-java-base')
    implementation project(':ultralight-java-databind')

    implementation group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2', classifier: lwjglClassifier()
}

def runDir = file("run")
if(!runDir.exists() && !runDir.mkdirs()) {
    throw new GradleException("Failed to create run directory")
}

def ultralightOsIdentifier = {
    def bitName = (System.getProperty("os.arch", "?").contains("64") ||
            System.getProperty("sun.arch.data.model", "?").contains("64")) ? "64" : "32"

    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "win-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "mac-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "linux-x" + bitName
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

application {
    mainClassName = "com.labymedia.ultralight.lwjgl3.opengl.ExampleMain"
}

run {
    workingDir runDir
}

task copyResources(type: Copy) {
    from new File(project(':ultralight-java-native').buildDir, "cmake-gen-${ultralightOsIdentifier()}/3rdparty/ultralight-${ultralightOsIdentifier()}/bin")
    include "**/*.dll", "**/*.so", "**/*.dylib", "resources/*"
    into runDir
}

task printRunCmd {
    doLast {
        println tasks.run.commandLine.join(" ")
    }
}

run.dependsOn copyResources


def platformExtension() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ".exe"
    } else {
        return ""
    }
}

def findRenderdoc() {
    def qRenderdoc = "qrenderdoc${platformExtension()}"

    for (String pathEntry : System.getenv("PATH").split(File.pathSeparator)) {
        def qRenderdocEntryFile = file("${pathEntry}${File.separator}${qRenderdoc}")
        if (qRenderdocEntryFile.exists()) {
            return qRenderdocEntryFile.absolutePath
        }
    }

    if (Os.isFamily(Os.FAMILY_UNIX)) {
        def qRenderdocDefaultFile = file("/usr/bin/qrenderdoc")
        if (qRenderdocDefaultFile.exists()) {
            return qRenderdocDefaultFile.absolutePath
        }
    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        def qRenderdocDefaultFile = file("C:\\Program Files\\RenderDoc\\qrenderdoc.exe")
        if (qRenderdocDefaultFile.exists()) {
            return qRenderdocDefaultFile.absolutePath
        }
    }

    throw new IllegalStateException("Failed to find qrenderdoc, searched PATH and, if available, standard locations")
}

task runWithRenderdoc {
    dependsOn build
    doLast {
        File.createTempFile("temp", ".cap").with { renderdocCaptureFile ->
            renderdocCaptureFile.deleteOnExit()

            def commandLine = tasks.run.getCommandLine()
            def executable = commandLine.get(0)
            def args = commandLine.subList(1, commandLine.size())

            def environmentVars = tasks.run.getEnvironment().collect { key, value ->
                return [
                        separator: "Platform style",
                        type     : "Set",
                        value    : value,
                        variable : key
                ]
            }

            renderdocCaptureFile.text = JsonOutput.toJson([
                    rdocCaptureSettings: 1,
                    settings           : [
                            autoStart      : true,
                            commandLine    : "${args.join(" ")}",
                            environment    : environmentVars,
                            executable     : "${executable}",
                            inject         : false,
                            numQueuedFrames: 0,
                            options        : [
                                    allowFullscreen           : true,
                                    allowVSync                : true,
                                    apiValidation             : false,
                                    captureAllCmdLists        : false,
                                    captureCallstacks         : false,
                                    captureCallstacksOnlyDraws: false,
                                    debugOutputMute           : true,
                                    delayForDebugger          : 0,
                                    hookIntoChildren          : false,
                                    refAllResources           : false,
                                    verifyBufferAccess        : false
                            ],
                            queueFrameCap  : 0,
                            workingDir     : "${tasks.run.getWorkingDir().absolutePath}"
                    ]
            ])

            exec {
                it.commandLine findRenderdoc(), renderdocCaptureFile.absolutePath
            }
        }
    }
}
